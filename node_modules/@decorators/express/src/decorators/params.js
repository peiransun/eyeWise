"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
/**
 * Parameter decorator factory, creates parameter decorator
 *
 * @param {ParameterType} parameterType Parameter Type
 */
function decoratorFactory(type) {
    return function (name) {
        return function (target, methodName, index) {
            const meta = meta_1.getMeta(target);
            if (meta.params[methodName] === undefined) {
                meta.params[methodName] = [];
            }
            meta.params[methodName].push({ index, type, name });
        };
    };
}
/**
 * Express req object
 */
exports.Request = decoratorFactory(meta_1.ParameterType.REQUEST);
/**
 * Express res object
 */
exports.Response = decoratorFactory(meta_1.ParameterType.RESPONSE);
/**
 * Express next function
 */
exports.Next = decoratorFactory(meta_1.ParameterType.NEXT);
/**
 * Express req.params object or single param, if param name was specified
 */
exports.Params = decoratorFactory(meta_1.ParameterType.PARAMS);
/**
 * Express req.query object or single query param, if query param name was specified
 */
exports.Query = decoratorFactory(meta_1.ParameterType.QUERY);
/**
 * Express req.body object or single body param, if body param name was specified
 */
exports.Body = decoratorFactory(meta_1.ParameterType.BODY);
/**
 * Express req.headers object or single headers param, if headers param name was specified
 */
exports.Headers = decoratorFactory(meta_1.ParameterType.HEADERS);
/**
 * Express req.body object or single cookies param, if cookies param name was specified
 */
exports.Cookies = decoratorFactory(meta_1.ParameterType.COOKIES);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGFyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQThEO0FBRTlEOzs7O0dBSUc7QUFDSCwwQkFBMEIsSUFBbUI7SUFDM0MsTUFBTSxDQUFDLFVBQVMsSUFBYTtRQUMzQixNQUFNLENBQUMsVUFBUyxNQUFXLEVBQUUsVUFBMkIsRUFBRSxLQUFhO1lBQ3JFLE1BQU0sSUFBSSxHQUFnQixjQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMvQixDQUFDO1lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsb0JBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUvRDs7R0FFRztBQUNVLFFBQUEsUUFBUSxHQUFHLGdCQUFnQixDQUFDLG9CQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFakU7O0dBRUc7QUFDVSxRQUFBLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxvQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXpEOztHQUVHO0FBQ1UsUUFBQSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsb0JBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUU3RDs7R0FFRztBQUNVLFFBQUEsS0FBSyxHQUFHLGdCQUFnQixDQUFDLG9CQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFM0Q7O0dBRUc7QUFDVSxRQUFBLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxvQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXpEOztHQUVHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsb0JBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUvRDs7R0FFRztBQUNVLFFBQUEsT0FBTyxHQUFHLGdCQUFnQixDQUFDLG9CQUFhLENBQUMsT0FBTyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzTWV0YSwgUGFyYW1ldGVyVHlwZSwgZ2V0TWV0YSB9IGZyb20gJy4uL21ldGEnO1xuXG4vKipcbiAqIFBhcmFtZXRlciBkZWNvcmF0b3IgZmFjdG9yeSwgY3JlYXRlcyBwYXJhbWV0ZXIgZGVjb3JhdG9yXG4gKlxuICogQHBhcmFtIHtQYXJhbWV0ZXJUeXBlfSBwYXJhbWV0ZXJUeXBlIFBhcmFtZXRlciBUeXBlXG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRvckZhY3RvcnkodHlwZTogUGFyYW1ldGVyVHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24obmFtZT86IHN0cmluZyk6IFBhcmFtZXRlckRlY29yYXRvciB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogYW55LCBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2wsIGluZGV4OiBudW1iZXIpIHtcbiAgICAgIGNvbnN0IG1ldGE6IEV4cHJlc3NNZXRhID0gZ2V0TWV0YSh0YXJnZXQpO1xuXG4gICAgICBpZiAobWV0YS5wYXJhbXNbbWV0aG9kTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXRhLnBhcmFtc1ttZXRob2ROYW1lXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBtZXRhLnBhcmFtc1ttZXRob2ROYW1lXS5wdXNoKHsgaW5kZXgsIHR5cGUsIG5hbWUgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBFeHByZXNzIHJlcSBvYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IFJlcXVlc3QgPSBkZWNvcmF0b3JGYWN0b3J5KFBhcmFtZXRlclR5cGUuUkVRVUVTVCk7XG5cbi8qKlxuICogRXhwcmVzcyByZXMgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBSZXNwb25zZSA9IGRlY29yYXRvckZhY3RvcnkoUGFyYW1ldGVyVHlwZS5SRVNQT05TRSk7XG5cbi8qKlxuICogRXhwcmVzcyBuZXh0IGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBOZXh0ID0gZGVjb3JhdG9yRmFjdG9yeShQYXJhbWV0ZXJUeXBlLk5FWFQpO1xuXG4vKipcbiAqIEV4cHJlc3MgcmVxLnBhcmFtcyBvYmplY3Qgb3Igc2luZ2xlIHBhcmFtLCBpZiBwYXJhbSBuYW1lIHdhcyBzcGVjaWZpZWRcbiAqL1xuZXhwb3J0IGNvbnN0IFBhcmFtcyA9IGRlY29yYXRvckZhY3RvcnkoUGFyYW1ldGVyVHlwZS5QQVJBTVMpO1xuXG4vKipcbiAqIEV4cHJlc3MgcmVxLnF1ZXJ5IG9iamVjdCBvciBzaW5nbGUgcXVlcnkgcGFyYW0sIGlmIHF1ZXJ5IHBhcmFtIG5hbWUgd2FzIHNwZWNpZmllZFxuICovXG5leHBvcnQgY29uc3QgUXVlcnkgPSBkZWNvcmF0b3JGYWN0b3J5KFBhcmFtZXRlclR5cGUuUVVFUlkpO1xuXG4vKipcbiAqIEV4cHJlc3MgcmVxLmJvZHkgb2JqZWN0IG9yIHNpbmdsZSBib2R5IHBhcmFtLCBpZiBib2R5IHBhcmFtIG5hbWUgd2FzIHNwZWNpZmllZFxuICovXG5leHBvcnQgY29uc3QgQm9keSA9IGRlY29yYXRvckZhY3RvcnkoUGFyYW1ldGVyVHlwZS5CT0RZKTtcblxuLyoqXG4gKiBFeHByZXNzIHJlcS5oZWFkZXJzIG9iamVjdCBvciBzaW5nbGUgaGVhZGVycyBwYXJhbSwgaWYgaGVhZGVycyBwYXJhbSBuYW1lIHdhcyBzcGVjaWZpZWRcbiAqL1xuZXhwb3J0IGNvbnN0IEhlYWRlcnMgPSBkZWNvcmF0b3JGYWN0b3J5KFBhcmFtZXRlclR5cGUuSEVBREVSUyk7XG5cbi8qKlxuICogRXhwcmVzcyByZXEuYm9keSBvYmplY3Qgb3Igc2luZ2xlIGNvb2tpZXMgcGFyYW0sIGlmIGNvb2tpZXMgcGFyYW0gbmFtZSB3YXMgc3BlY2lmaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBDb29raWVzID0gZGVjb3JhdG9yRmFjdG9yeShQYXJhbWV0ZXJUeXBlLkNPT0tJRVMpO1xuIl19